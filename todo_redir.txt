
cat < prout > caca 
cmd = ls | t_redir: in = prout out = caca
cat < in > out > caca
cmd = ls | t_redir: in = in out = out
         |     next-> in = null out = caca
cat < in > out > caca < lol
cmd = ls | t_redir: in = lol out = out
         |     next-> in = null out = caca
         ou
cmd = ls | t_redir: in = in out = out
         |     next-> in = lol out = caca

cmd "|" only segfaults > a priori ok (pareil pour les < et <<) mais ca sort DE MINISHELL...
exit | ls exec ls
Comportement des rediction dans bash

CMD > file (Write stout in file);
CMD < file (write stdin from file to cmd);
CMD > file1 > file2 > file 3 (Write std-out in last file)
CMD > file | CMD | .. (Write file in file and execute next command like if the first does not exist);
CMD < FILE | CND | .. (Like normal cmd but the first stdin is file);
CMD | CMD < FILE | .. (Change the stdin of the cmd)